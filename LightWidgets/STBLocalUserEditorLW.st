'From Squeak3.7 of ''4 September 2004'' [firmware: STMC-103-CYT-0.0.0A-datacast   boxSerial#: FAKE-DEV] on 25 November 2009 at 12:43:53 pm'!!classDefinition: #STBLocalUserEditorLW category: #'SqueakSTB-Base-LW'!DialogLW subclass: #STBLocalUserEditorLW	instanceVariableNames: 'titleLW localUsersLW newUserLW nameLW passwordLW currentGroupLW availableGroupsLW saveLW cancelLW deleteLW backColor password'	classVariableNames: ''	poolDictionaries: ''	category: 'SqueakSTB-Base-LW'!!STBLocalUserEditorLW methodsFor: 'initialization' stamp: 'jmv 6/10/2009 13:03'!initialize	"initialize the state of the receiver"		| c f2 |	super initialize.	bounds _ (0@0 extent: SqueakSTBUtil displayResolution) insetBy: 4.	c _ SqueakSTB current preferences defaultBackgroundColor.	f2 _ SqueakSTBUtil standardFont: 12.	backColor _ c lighter lighter.		titleLW _ LabelLW label: 'Create / Edit / Delete local users'.	titleLW bounds: (190@25 extent: 400@30).	self addMorphBack: titleLW.		newUserLW _ ButtonLW new		target: self action: #newUser;		bounds: (100@80 extent: 190@44);		label: 'Create New User'.	self addMorphBack: newUserLW.	self addMorphBack: (		(LabelLW label: 'Existing (OK: edit)')		bounds: (385@70 extent: 300@30);		font: f2).			localUsersLW _ ListLW new		bounds: (380@90 extent: 300@130);		backColor: c.	self addMorphBack: localUsersLW.		self addMorphBack: (		(LabelLW label: 'Name')		bounds: (48@146 extent: 90@30);		font: f2).			nameLW _ EntryFieldWithKeyboardLW new		keyboardLabel: 'Use the on-screen keyboard to enter the User Name, RET when done';		bounds: (130@140 extent: 200@30).	self addMorphBack: nameLW.		self addMorphBack: (		(LabelLW label: 'Password')		bounds: (48@186 extent: 90@30);		font: f2).		passwordLW _ EntryField2LW new		bounds: (130@180 extent: 200@30).	self addMorphBack: passwordLW.	self addMorphBack: (		(LabelLW label: 'Current groups (OK: remove)')		bounds: (45@234 extent: 300@30);		font: f2).			currentGroupLW _ ListLW new		bounds: (40@260 extent: 300@130);		backColor: c.	self addMorphBack: currentGroupLW.	self addMorphBack: (		(LabelLW label: 'Available groups (OK: add)')		bounds: (385@234 extent: 300@30);		font: f2).		availableGroupsLW _ ListLW new		bounds: (380@260 extent: 300@130);		backColor: c.	self addMorphBack: availableGroupsLW.		saveLW _ ButtonLW new		target: self action: #saveUser;		bounds: (90@406 extent: 170@44);		label: 'Save changes'.	self addMorphBack: saveLW.		deleteLW_ ButtonLW new		target: self action: #deleteUser;		bounds: (275@406 extent: 170@44);		label: 'Delete user'.	self addMorphBack: deleteLW.		cancelLW_ ButtonLW new		target: self action: #cancel;		bounds: (460@406 extent: 170@44);		label: 'Close'.	self addMorphBack: cancelLW.		self newUser! !!STBLocalUserEditorLW methodsFor: 'drawing' stamp: 'jmv 1/26/2009 14:18'!drawOn: aCanvas	aCanvas fillRectangle: bounds color: backColor! !!STBLocalUserEditorLW methodsFor: 'user commands' stamp: 'jmv 1/26/2009 16:11'!addGroup: anSTBGroup	| w |	w _ ActiveHand keyboardFocus owner.	target addGroup: anSTBGroup.	w owner == self ifTrue: [		ActiveHand newKeyboardFocus: saveLW ]! !!STBLocalUserEditorLW methodsFor: 'user commands' stamp: 'jmv 1/28/2009 10:18'!cancel	STBLocalUser readPersisted.	STBModel startPersistProcess.	self delete.	SqueakSTB current applicationManager focusTopView! !!STBLocalUserEditorLW methodsFor: 'user commands' stamp: 'jmv 4/6/2009 09:22'!deleteUser	| notNew |	notNew _ STBLocalUser persistentObjects includes: target.		STBModel startPersistProcess.	target persistNot.	self updateView.		notNew ifTrue: [		Log notice: 'Deleted local user ', target userName ].	ActiveHand newKeyboardFocus: newUserLW! !!STBLocalUserEditorLW methodsFor: 'user commands' stamp: 'jmv 4/6/2009 09:20'!newUser	| u existing n i existing2 |	existing _ STBUser persistentObjects.	existing2 _ STBLocalUser persistentObjects.	n _ 'New'.	i _ 2.	[ 		(existing anySatisfy: [ :any | any userName = n ]) or: [			existing2 anySatisfy: [ :any | any userName = n ] ]	] whileTrue: [		n _ 'New ', i printString.		i _ i + 1 ].	u _ STBLocalUser new.	u guid.	u userName: n.	password _ ''.	self beMainViewOn: u.	ActiveHand newKeyboardFocus: newUserLW! !!STBLocalUserEditorLW methodsFor: 'user commands' stamp: 'jmv 4/3/2009 12:27'!password: aString	password _ aString.	target assignPassword: aString! !!STBLocalUserEditorLW methodsFor: 'user commands' stamp: 'jmv 1/26/2009 16:12'!removeGroup: anSTBGroup	| w |	w _ ActiveHand keyboardFocus owner.	target removeGroup: anSTBGroup.	w owner == self ifTrue: [		ActiveHand newKeyboardFocus: saveLW ]! !!STBLocalUserEditorLW methodsFor: 'user commands' stamp: 'jmv 4/6/2009 09:20'!saveUser	| isNew persistent n |	persistent _ STBLocalUser persistentObjects.	isNew _ (persistent includes: target) not.	n _ target userName.		(isNew and: [ 		persistent anySatisfy: [ :any | any userName = n ]])			ifTrue: [ ^ self ].		STBModel startPersistProcess.	target persist.	self updateView.		isNew ifTrue: [		Log logAction: 'NewLocalUser'			keys: #(UserID UserName Date Time)			values: {target guid printString . target userName. Date today yyyymmdd. Time now print24}].		(password notNil and: [ password notEmpty ]) ifTrue: [		Log notice: 'Local user ', n, ' password was changed' ].		ActiveHand newKeyboardFocus: newUserLW! !!STBLocalUserEditorLW methodsFor: 'user commands' stamp: 'jmv 1/28/2009 11:22'!selectedUser: anSTBLocalUser	STBModel stopPersistProcess.	password _ nil.	self beMainViewOn: anSTBLocalUser.	ActiveHand newKeyboardFocus:  nameLW! !!STBLocalUserEditorLW methodsFor: 'updating' stamp: 'jmv 1/27/2009 10:46'!password	^password ifNil: ['****']! !!STBLocalUserEditorLW methodsFor: 'updating' stamp: 'jmv 1/27/2009 10:26'!updateView	| all used available persistent |		persistent _ STBLocalUser persistentObjects.	titleLW label: ((persistent includes: target)		ifTrue: [ '  Edit / Delete existing local user' ]		ifFalse: [ '               New local user' ]).		localUsersLW removeAllMorphs.	persistent do: [ :u |		localUsersLW addItem: u userName action: #selectedUser: argument: u ].	nameLW target: target aspect: #userName action: #userName:.	passwordLW target: self aspect: #password action: #password:.		all _ STBAgeGroups persistentObjects.	used _ target groups.	available _ all difference: used.		currentGroupLW removeAllMorphs.	used do: [ :g |		currentGroupLW addItem: g groupName action: #removeGroup: argument: g ].		availableGroupsLW removeAllMorphs.	available do: [ :g |		availableGroupsLW addItem: g groupName action: #addGroup: argument: g ].! !